[
  {
    "ID": "CMD001", 
    "Int": 6, 
    "Name": "PrintLocalData",
    "Description": "Print the local data stored at the provided address.",
    "Example":"6 *0082*",
    "Family": "Read/Write Memory Commands",
    "Parameters": [
      {
        "Name": "Address",
        "Type": "Hexadecimal",
        "Description": "The address of the data to be printed."
      }
    ]
  },
  {
    "ID": "CMD002", 
    "Int": 7, 
    "Name": "SetRTU_ID",
    "Description": "Set the RTU ID.",
    "Example":"7 3 2 1 0 -> sets ID to 3.2.1.0",
    "Family": "Debugging Commands",
    "Parameters": [
      {
        "Name": "ID1",
        "Type": "Integer",
        "Description": "The First ID to be set."
      },
      {
        "Name": "ID2",
        "Type": "Integer",
        "Description": "The Second ID to be set."
      },
      {
        "Name": "ID3",
        "Type": "Integer",
        "Description": "The Third ID to be set."
      },
      {
        "Name": "ID4",
        "Type": "Integer",
        "Description": "The Fourth ID to be set."
      }
    ]
  },
  {
    "ID": "CMD003", 
    "Int": 10, 
    "Name": "SetAbsoluteTime",
    "Description": "Set time to absolute value.",
    "Example":"10 10 21 11 5 17 26 30 -> sets to OCT-10-21 Thur 17:26:30",
    "Family": "GNC Commands",
    "Parameters": [
      {
        "Name": "Month",
        "Type": "Integer",
        "Description": "Integer representation of month (10 represents October)."
      },
      {
        "Name": "Day",
        "Type": "Integer",
        "Description": "Integer representation of day (10 represents day 10 of month)."
      },
      {
        "Name": "Year",
        "Type": "Integer",
        "Description": "Integer representation of year (21 represents 2021)."
      },
      {
        "Name": "Weekday",
        "Type": "Integer",
        "Description": "Integer representation of weekday (5 represents Thursday)."
      },
      {
        "Name": "Hour",
        "Type": "Integer",
        "Description": "Integer representation of hour (17 represents 5:00 PM)."
      },
      {
        "Name": "Minute",
        "Type": "Integer",
        "Description": "Integer representation of minute (26 represents 26 minutes past the hour)."
      },
      {
        "Name": "Second",
        "Type": "Integer",
        "Description": "Integer representation of second (30 represents 30 seconds past the minute)."
      }
    ]
  },
  {
    "ID": "CMD004", 
    "Int": 14, 
    "Name": "AssignDefaultDestinationID",
    "Description": "No good documentation on the exact syntax of this command.",
    "Example":"",
    "Family": "Read/Write Memory Commands",
    "Parameters": [
      {
        "Name": "ID1",
        "Type": "Integer",
        "Description": "The First ID to be set."
      },  
      {
        "Name": "ID2",
        "Type": "Integer",
        "Description": "The Second ID to be set."
      },
      {
        "Name": "ID3",
        "Type": "Integer",
        "Description": "The Third ID to be set."
      },
      {
        "Name": "ID4",
        "Type": "Integer",
        "Description": "The Fourth ID to be set."
      }
    ]
  },
  {
    "ID": "CMD005", 
    "Int": 17, 
    "Name": "ReinitializePorts",
    "Description": "Set the destination ID.",
    "Example":"17",
    "Family": "Read/Write Memory Commands"
  },
  {
    "ID": "CMD006", 
    "Int": 33, 
    "Name": "GenericFlashMemoryCommands",
    "Description": "Read/Write from/two Flash Memory.",
    "Example": "See specific Command Parameters",
    "Family": "Read/Write Memory Commands",
    "Parameters": [
      {
        "Name": "Read",
        "Description": "Reads (len)-bytes from flash to the calling port (max length set by general buffer size).",
        "Command": "r",
        "Example": "33 r *010000* 128",
        "Parameters": [
          {
            "Name": "Address",
            "Type": "Hexadecimal",
            "Description": "The address of the data to be read."
          },
          {
            "Name": "Length",
            "Type": "Integer",
            "Description": "The number of bytes to be read."
          }
        ]
      },
      {
        "Name": "Write",
        "Description": "Writes a string to flash (max length set by maximum command length)",
        "Command": "w",
        "Example": "33 w *0C0000 \"Write this to flash\"",
        "Parameters": [
          {
            "Name": "Address",
            "Type": "Hexadecimal",
            "Description": "The address of the data to be written."
          },
          {
            "Name": "Length",
            "Type": "Integer",
            "Description": "The number of bytes to be written."
          }
        ]
      }
    ]
  },
  {
    "ID": "CMD007", 
    "Int": 62, 
    "Name": "Run10SecondDelay",
    "Description": "Run a 10 second delay.",
    "Example": "62",
    "Family": "Schedule Commands"
  },
  {
    "ID": "CMD008", 
    "Int": 63,
    "Name": "ResetSatellite",
    "Description": "Reset the satellite.",
    "Example": "63",
    "Family": "Debugging Commands"
  },
  {
    "ID": "CMD009", 
    "Int": 65, 
    "Name": "InitializeModules",
    "Description": "Init the following modules: Geo, Orbit, GNC, Load, Attitude Sensors, IMI",
    "Example": "65",
    "Family": "GNC Commands"
  },
  {
    "ID": "CMD010", 
    "Int": 70, 
    "Name": "CheckForSun",
    "Description": "Checks for sun and schedules certain commands if the sun is found. If override flag is set, it forces the scheduling of the commands, regardless of whether the sun is found.",
    "Example": "",
    "Family": "GNC Commands",
    "Parameters": [
      {
        "Name": "Override",
        "Type": "Boolean",
        "Description": "If true, forces the scheduling of the commands, regardless of whether the sun is found."
      }
    ]
  },
  {
    "ID": "CMD011",
    "Int": 96,
    "Name": "StopMacro",
    "Description": "Stops Macro with given ID. Macro ID = 255 means all macros are stopped.",
    "Example": "96 10",
    "Family": "Macro Commands",
    "Parameters": [
      {
        "Name": "MacroID",
        "Type": "Integer",
        "Description": "The ID of the macro to be stopped."
      }
    ]
  },
  {
    "ID": "CMD012",
    "Int": 97,
    "Name": "StartMacro",
    "Description": "Starts Macro with given ID. Macro ID = 255 means all macros are started.",
    "Example": "97 10 2",
    "Family": "Macro Commands",
    "Parameters": [
      {
        "Name": "MacroID",
        "Type": "Integer",
        "Description": "The ID of the macro to be started."
      },
      {
        "Name": "NumLoops",
        "Type": "Integer",
        "Description": "The number of loops to run a given Macro. When [num loops] = 255, macro will run infinitely and in the background"
      }
    ]
  },
  {
    "ID": "CMD013",
    "Int": 99,
    "Name": "LoadMacroCommand",
    "Description": "Loads or clears a macro.",
    "Example": "99 50 1 100 4 100 10 0 1 3 30 33 83 2 31 2",
    "Family": "Macro Commands",
    "Parameters": [
      {
        "Name": "MacroID",
        "Type": "Integer",
        "Description": "The ID of the macro to be set."
      },
      {
        "Name": "Flag",
        "Type": "Boolean",
        "Description": "Load or Clear a given Macro. 1 = Load, 0 = Clear",
        "Parameters": [
          {
            "Name": "Load",
            "Description": "Load a given Macro.",
            "Command": "1"
          },
          {
            "Name": "Clear",
            "Description": "Clear a given Macro.",
            "Command": "0"
          }
        ]
      },
      {
        "Name": "MacroContents",
        "Type": "String",
        "Description": "The contents of the macro to be loaded."
      }
    ]
  },
  {
    "ID": "CMD014",
    "Int": 100,
    "Name": "ProgramMacroTimeDelay",
    "Description": "Programs a delay, preventing the provided macro frum running until the num_secs has passed.",
    "Example": "",
    "Family": "Schedule Commands",
    "Parameters": [
      {
        "Name": "MacroID",
        "Type": "Integer",
        "Description": "The ID of the macro to be set."
      },
      {
        "Name": "NumSecs",
        "Type": "Integer",
        "Description": "The number of seconds to delay the macro."
      }
    ]
  },
  {
    "ID": "CMD015",
    "Int": 101,
    "Name": "ProgramMacroNumDelay",
    "Description": "Programs a delay, preventing the provided Macro to exectute until the number of interrupts has passed.",
    "Example": "",
    "Family": "Schedule Commands", 
    "Parameters": [
      {
        "Name": "MacroID",
        "Type": "Integer",
        "Description": "The ID of the macro to be set."
      },
      {
        "Name": "NumInterrupts",
        "Type": "Integer",
        "Description": "The number of interrupts to delay the macro."
      }
    ]
  },
  {
    "ID": "CMD016",
    "Int": 102,
    "Name": "RunMillisDelay",
    "Description": "Runs a delay for the given number of milliseconds.",
    "Example": "",
    "Family": "Schedule Commands",
    "Parameters": [
      {
        "Name": "NumMillis",
        "Type": "Integer",
        "Description": "The number of milliseconds to delay."
      }
    ]
  },
  {
    "ID": "CMD017",
    "Int": 103,
    "Name": "RunMacroAfterMacro",
    "Description": "Wait for 'm' Macro to complete before continuing Macro 'n'.",
    "Example": "",
    "Family": "Schedule Commands",
    "Parameters": [
      {
        "Name": "MacroID1",
        "Type": "Integer",
        "Description": "The ID of the macro to be first completet."
      },
      {
        "Name": "MacroID2",
        "Type": "Integer",
        "Description": "The ID of the macro to be run after the first macro is complete."
      }
    ]
  },
  {
    "ID": "CMD018",
    "Int": 107,
    "Name": "InitializeOrbit",
    "Description": "Initialize Orbit.",
    "Example": "107 \"421.53 6820999.95 649.0 4215.3 -0.856 6490.0\"",
    "Family": "GNC Commands",
    "Parameters": [
      {
        "Name": "XPos",
        "Type": "Float",
        "Description": "The X position of the satellite."
      },
      {
        "Name": "YPos",
        "Type": "Float",
        "Description": "The Y position of the satellite."
      },
      {
        "Name": "ZPos",
        "Type": "Float",
        "Description": "The Z position of the satellite."
      },
      {
        "Name": "XVel",
        "Type": "Float",
        "Description": "The X velocity of the satellite."
      },
      {
        "Name": "YVel",
        "Type": "Float",
        "Description": "The Y velocity of the satellite."
      },
      {
        "Name": "ZVel",
        "Type": "Float",
        "Description": "The Z velocity of the satellite."
      }
    ]
  },
  {
    "ID": "CMD019",
    "Int": 108,
    "Name": "PassStringToOrbitCommandProcessor",
    "Description": "Pass string to Orbit Command Processor.",
    "Example": "108 \"String to pass\"",
    "Family": "Guidance, Navigation, and Control Commands",
    "Parameters": [
      {
        "Name": "CommandString",
        "Type": "String",
        "Description": "A string to be passed to the Orbit Command Processor."
      }
    ]
  },
  {
    "ID": "CMD020",
    "Int": 109,
    "Name": "GeomagneticModelConfiguration",
    "Description": "Geomagnetic Model Configuration.",
    "Example": "109 {refer to parameters}",
    "Family": "Guidance, Navigation, and Control Commands",
    "Parameters": [
      {
        "Name": "EnableGeomagneticModel",
        "Description": "Returns: \"Geomag Initialized\"",
        "Command": "E",
        "Example": "r 109 E"
      },
      {
        "Name": "DisableGeomagneticModel",
        "Description": "Returns: \"Geomag Disabled\"",
        "Command": "D",
        "Example": "r 109 D"
      },
      {
        "Name": "LoadsStaticCoefficientsIntoFlash",
        "Description": "This only needs to be done once.",
        "Command": "C",
        "Example": "r 109 C 0 \"-29619.4 13.3 2.0 2.0 \"",
        "Parameters":
        [ {
          "Name": "Mag",
          "Type": "Float",
          "Description": "TODO: Likely Magnitude of residual dipole"
        },
        {
          "Name": "Bx",
          "Type": "Float",
          "Description": "TODO: Likely Bx of residual dipole"
        },
        {
          "Name": "By",
          "Type": "Float",
          "Description": "TODO: Likely By of residual dipole"
        },
        {
          "Name": "Bz",
          "Type": "Float",
          "Description": "TODO: Likely Bz of residual dipole"
        } ]
      },
      {
        "Name": "TestCommandToPrintTestBFieldVector",
        "Description": "Test command to print test B field vector.",
        "Command": "T",
        "Example": "Format: r 109 T \"(pos eci) (gha)\"",
        "Parameters":
        [ {
          "Name": "PosEci",
          "Type": "Float",
          "Description": "TODO: Determine what Pos ECI is here, likely a string cartesian position."
        },
        {
          "Name": "gha",
          "Type": "Float",
          "Description": "TODO: Figure out what gha means here."
        }]
      },
      {
        "Name": "SetToReadGeoMagCoeffFromFlash",
        "Description": "Set to read geo magnetic coefficients from flash. Returns: \"reading geomap coefs from Flash\"",
        "Command": "F",
        "Example": "r 109 T"
      },
      {
        "Name": "SetToReadGeoMagCoeffFromROM",
        "Description": "Set to read geo magnetic coefficients from ROM",
        "Command": "R",
        "Example": "r 109 R"
      },
      {
        "Name": "ReturnsTheGlobalNumberOfGeoMagCRCerrors",
        "Description": "Returns the global number of Geomag CRC errors",
        "Command": "x",
        "Example": "r 109 x"
      }
    ]
  },
  {
    "ID": "CMD021",
    "Int": 110,
    "Name": "GNCCommands",
    "Description": "GNC Commands.",
    "Example": "r 110 {see parameters}",
    "Family": "Guidance, Navigation, and Control Commands",
    "Parameters": [
      {
        "Name": "EnableGNC",
        "Type": "None",
        "Command": "e",
        "Description": "Enable GNC.",
        "Example": "r 110 e"
      },
      {
        "Name": "DisableGNC",
        "Type": "None",
        "Command": "D",
        "Description": "Disable GNC",
        "Example": "r 110 D"
      },
      {
        "Name": "LoadGNCdefault",
        "Type": "None",
        "Command": "Z",
        "Description": "Load GNC default",
        "Example": "r 110 Z"
      },
      {
        "Name": "RestoreFromFlashTheExtInConfiguration",
        "Type": "None",
        "Command": "r",
        "Description": "Restore from flash the ExtIn configuration.",
        "Example": "r 110 r"
      },
      {
        "Name": "StoreCurrentConfigurationInFlash",
        "Type": "None",
        "Command": "s",
        "Description": "Store current configuration in flash.",
        "Example": "r 110 s"
      },
      {
        "Name": "LoadsFloatIntoExtInArray",
        "Command": "l",
        "Description": "Loads a float into the global ExtIn array.",
        "Example": "r 110 l 0 \"5.0\"",
        "Parameters": [
          {
            "Name": "Index",
            "Type": "Integer",
            "Description": "The index of the ExtIn array to be set."
          },
          {
            "Name": "Value",
            "Type": "Float",
            "Description": "The value to be set."
          }
        ]
      },
      {
        "Name": "Reset",
        "Command": "q",
        "Description": "Reset",
        "Example": "r 110 q"
      },
      {
        "Name": "ToggleGNCscreen",
        "Command": "x",
        "Description": "Toggle whether we show/hide the GNC screen.",
        "Example": "r 110 x"
      }
    ]
  },
  {
    "ID": "CMD022",
    "Int": 111,
    "Name": "E/DExtinValues",
    "Description": "Enable/Disable Extin values.",
    "Example": "r 111 {see parameters}",
    "Family": "Debugging Commands"
  },
  {
    "ID": "CMD023",
    "Int": 112,
    "Name": "GyroTestCommands",
    "Description": "Gyro test commands.",
    "Example": "r 112 {see parameters}",
    "Family": "Debugging Commands",
    "Parameters": [
      {
        "Name": "DumpRawData",
        "Description": "Quick test to dump raw data results to display.",
        "Command": "T"
      },
      {
        "Name": "PowerOnGyroWithoutInitialization",
        "Description": "Powers on the gyro without initialization",
        "Command": "P"
      },
      {
        "Name": "PowerOnGyroAndInitializesHardware",
        "Description": "Powers on the gyro and initializes the hardware.",
        "Command": "E"
      },
      {
        "Name": "DisableGyro",
        "Description": "Disables the gyro.",
        "Command": "D"
      },
      {
        "Name": "SendCommandsToGyroOverSPI",
        "Description": "Sends a certain number of bytes to the gyro over SPI.",
        "Command": "C",
        "Example": "r 112 C {See Parameters}",
        "Parameters":[
          {
            "Name": "ReadEN_AVGregister",
            "Description": "Reads SEN_AVG register.",
            "Command": "*3800*"
          },
          {
            "Name": "ReadInternalSampleRate",
            "Description": "Reads the internal sample rate.",
            "Command": "*3600*"
          },
          {
            "Name": "ReadProductID",
            "Description": "Reads product ID.",
            "Command": "*5600*"
          },
          {
            "Name": "ReadSerialNumber",
            "Description": "Reads serial number.",
            "Command": "*5800*"
          },
          {
            "Name": "ReadGyroRotation",
            "Description": "Reads the gyro out rotation.",
            "Command": "*0400*"
          },
          {
            "Name": "ReadsTemperature",
            "Description": "Reads temperature.",
            "Command": "*0C00*"
          },
          {
            "Name": "ReadFlashCount",
            "Description": "Reads the flash count.",
            "Command": "*0000*"
          },
          {
            "Name": "ReadGYRO_OFF",
            "Description": "Reads GYRO_OFF.",
            "Command": "*1400*"
          },
          {
            "Name": "ReadGYRO_SCALE",
            "Description": "Reads GYRO_SCALE.",
            "Command": "*1600*"
          },
          {
            "Name": "GetResultFromPreviousRequest",
            "Description": "Get result from previous request.",
            "Command": "*FFFF*"
          },
          {
            "Name": "GetsDIAG_STAT",
            "Description": "Gets DIAG_STAT.",
            "Command": "*3C00*"
          },
          {
            "Name": "SetSenseRangeTo80Degrees/sec",
            "Description": "Sets the sense range to 80 degrees/sec.",
            "Command": "*B901*"
          },
          {
            "Name": "FactoryRestore",
            "Description": "Factory Restore.",
            "Command": "*BE02*"
          },
          {
            "Name": "WriteSettingsToFlash",
            "Description": "Write settings to flash.",
            "Command": "*BE04*"
          },
          {
            "Name": "Write0x01ToGYRO_OFF0_7",
            "Description": "Write 0x01 to GYRO_OFF[0:7] (not saved through reset unless you write to flash).",
            "Command": "*94c7*"
          },
          {
            "Name": "Write0x01ToGYRO_OFF8_15",
            "Description": "Write 0x01 to GYRO_OFF[8:15] (not saved through reset unless you write to flash).",
            "Command": "*95ff*"
          },
          {
            "Name": "ReadsValuesFromFlash",
            "Description": "Reads values from flash.",
            "Command": "*BE80*"
          },
          {
            "Name": "WriteValuesToFlash",
            "Description": "Write values to flash?.",
            "Command": "*BE08*"
          }
        ]
      },
      {
        "Name": "GyroBiasOptimizationTest",
        "Description": "Gyro bias optimization test. \nCalibrates the gyro offset by recording 150 seconds of data at 256 samples per second. \nOffset = 0 - Only calculates offset \nOffset = 1 - Calibrates Gyro Offset, must be stationary for 160 seconds.",
        "Command": "B",
        "Parameters": [
          {
            "Name": "GyroNum",
            "Description": "gyro num 0-2",
            "Type": "Integer"
          }, 
          {
            "Name": "FixOffset",
            "Description": "Fix offset 0/1",
            "Type": "Integer"
          }
        ]
      }
    ]
  },
  {
    "ID": "CMD024",
    "Int": 113,
    "Name": "UARTPortHandshaking",
    "Description": "Set or unsets handshaking for specified port.",
    "Example": "r 113 {port} 1",
    "Family": "Debugging Commands",
    "Parameters": [
      {
        "Name": "Port",
        "Type": "Integer",
        "Description": "TODO: Determine port numbers"
      },
      {
        "Name": "OnOff",
        "Type": "Boolean",
        "Description": "1:ON, 0:OFF"
      }
    ]
  },
  {
    "ID": "CMD025",
    "Int": 116,
    "Name": "PingSunSensor",
    "Description": "Ping Sun Sensor. Does not print anything if present.",
    "Example": "r 116",
    "Family": "Debugging Commands"
  },
  {
    "ID": "CMD026",
    "Int": 118,
    "Name": "AttitudeSensorCollection",
    "Description": "Attitude Sensor Collection.",
    "Example": "r 118 E",
    "Family": "Guidance, Navigation, and Control Commands",
    "Parameters": [
      {
        "Name": "Enable",
        "Command": "E",
        "Description": "Enable attitude sensor collection."
      },
      {
        "Name": "Disable",
        "Command": "D",
        "Description": "Disable attitude sensor collection."
      } 
    ]
  },
  {
    "ID": "CMD027",
    "Int": 119,
    "Name": "GenericCommandingForIMI",
    "Description": "Generic commanding for IMI.",
    "Example": "r 119 {See Parameters}",
    "Family": "Guidance, Navigation, and Control Commands",
    "Parameters": [
      {
        "Name": "EnableRealWritingToIMIfromGNC",
        "Command": "E",
        "Description": "Enable real writing to IMI from GNC; Advisable to explicitly command test mode first."
      },
      {
        "Name": "DisableRealWritingToIMIfromGNC",
        "Command": "D",
        "Description": "Disable real writing to IMI from GNC."
      }, 
      {
        "Name": "EnableTestMode",
        "Command": "0",
        "Description": "Enable Test Mode."
      },
      {
        "Name": "CommandWheelSpeeds",
        "Command": "1",
        "Description": "Commands Wheel speeds. Sets IMI wheel speeds in deg/sec in either x, y, or z in MAI coordinate system; Example: r 119 1 \"990.0 0.0 300.0\" Set RW rates to 990, 0, 300",
        "Example": " r 119 1 \"990.0 0.0 300.0\"",
        "Parameters": [
          {
            "Name": "SpeedX",
            "Description": "Command Wheel X. TODO: Determine Wheel Speed Range.",
            "Type": "Float"
          },
          {
            "Name": "SpeedY",
            "Description": "Command Wheel Y. TODO: Determine Wheel Speed Range.",
            "Type": "Float"
          },
          {
            "Name": "SpeedZ",
            "Description": "Command Wheel Z. TODO: Determine Wheel Speed Range.",
            "Type": "Float"
          }
        ]
      },
      {
        "Name": "CommandTorqueCoils",
        "Command": "2",
        "Description": "Sets IMI torque coil dipole strength in Am2 in either. Example: r 119 2 \"0.01 0.0 0.0\"; sets torque coil X to 0.01 Am2",
        "Example": " r 119 2 \"0.01 0.0 0.0\"",
        "Parameters": [
          {
            "Name": "MagX",
            "Description": "Comands Wheel Torque Coil X. TODO: Determine torque coil range.",
            "Type": "Float"
          },
          {
            "Name": "MagY",
            "Description": "Comands Wheel Torque Coil Y. TODO: Determine torque coil range.",
            "Type": "Float"
          },
          {
            "Name": "MagZ",
            "Description": "Comands Wheel Torque Coil Z. TODO: Determine torque coil range.",
            "Type": "Float"
          }
        ]
      },
      {
        "Name": "CommandWheelTorques",
        "Command": "3",
        "Description": "Sets IMI Wheel Torque in mNm in either x, y, or z",
        "Example": " r 119 3 {X Y Z}",
        "Parameters": [
          {
            "Name": "TorqueX",
            "Description": "Command Wheel X Torque. TODO: Determine Wheel Torque Range.",
            "Type": "Float"
          },
          {
            "Name": "TorqueY",
            "Description": "Command Wheel Y Torque. TODO: Determine Wheel Torque Range.",
            "Type": "Float"
          },
          {
            "Name": "TorqueZ",
            "Description": "Command Wheel Z Torque. TODO: Determine Wheel Torque Range.",
            "Type": "Float"
          }
        ]
      }
    ]
  },
  {
    "ID": "CMD028",
    "Int": 126,
    "Name": "TelemetryPackets",
    "Description": "Telemetry Packets.",
    "Example": "r 126 {packet type} {beacon/storage} {2 byte list of elements}",
    "Family": "Communication Commands",
    "Parameters": [
      {
        "Name": "BeaconType",
        "Type": "Integer",
        "Description": "Packet type used by ground software.",
        "Parameters": [
          {
            "Name": "MISC",
            "Description": "TODO: Determine Type 0.", 
            "Command": "0",
            "Example": "r 126 0 0 150"
          },
          {
            "Name": "TLM",
            "Description": "TODO: Determine Type 1.",
            "Command": "1",
            "Example": "126 1 0 0 100 2 0 0 250"
          }
        ]
      },
      {
        "Name": "BeaconStorage",
        "Type": "Integer",
        "Description": "Storage type.",
        "Parameters": [
          {
            "Name": "StoreData",
            "Description": "Only stores data.",
            "Command": "0",
            "Example": "r 126 0 0 150"
          },
          {
            "Name": "StoreAndBeacon",
            "Description": "Storage and Beacon",
            "Command": "1",
            "Example": "r 126 0 1 150"
          },
          {
            "Name": "BeaconOnly",
            "Description": "Beacon only.",
            "Command": "2",
            "Example": "r 126 0 2 150"
          }
        ]
      },
      {
        "Name": "Elements",
        "Type": "String",
        "Description": "2 byte list of elements. For a list of what each element represents, please refer to the flight software code. \nInteger Format: \n\t1st byte is multiple of 256x \n\t2nd byte is LSB, and addres to first one. \n\t(e.g. 2 3 = 2*256 + 3 = 515). \nHex Format: \n\t*0157* = 0x0157 = 343",
        "Example": "r 126 1 0 *012c012d012e012f0130013101320133*"
      }
    ]
  },
  {
    "ID": "CMD029",
    "Int": 127,
    "Name": "BeaconData",
    "Description": "Beacon Data.",
    "Example": "r 127 {TODO: Figure this out}",
    "Family": "Communication Commands",
    "Parameters": [
      {
        "Name": "SizeOfBeaconData",
        "Type": "Integer",
        "Description": "Size of Beacon Data in 2 bytes."
      }, 
      {
        "Name": "BeaconData",
        "Type": "String",
        "Description": "Beacon Data.",
        "Example": "r 127 150 *012c012d012e012f0130013101320133*"
      }
    ]
  },
  {
    "ID": "CMD030",
    "Int": 130,
    "Name": "Load1Byte",
    "Description": "Load a 1 byte into the global Extin array.",
    "Example": "r 130 32 *04fe*",
    "Family": "Debugging Commands",
    "Parameters": [
      {
        "Name": "Index",
        "Type": "Integer",
        "Description": "1 byte index of the Extin array to be set."
      },
      {
        "Name": "1ByteValue",
        "Type": "String",
        "Description": "The value to be set."
      }
    ]
  },
  {
    "ID": "CMD031",
    "Int": 131,
    "Name": "CommandForwarding",
    "Description": "Forward the received command to the other processor.",
    "Example": "r 131 151",
    "Family": "Macro Commands",
    "Parameters": [
      {
        "Name": "Command",
        "Type": "String",
        "Description": "TODO: Discuss how to implement this. You should be able to assemble a command inside this forwarding."
      }
    ]
  },
  {
    "ID": "CMD032",
    "Int": 132,
    "Name": "EchoCommand",
    "Description": "Forward the received command to the other processor.",
    "Example": "",
    "Family": "Macro Commands",
    "Parameters": [
      {
        "Name": "Port1",
        "Type": "Integer",
        "Description": "The port to originate from."
      },
      {
        "Name": "Port2",
        "Type": "Integer",
        "Description": "The port to send to."
      },
      {
        "Name": "TerminatorPort",
        "Type": "Integer",
        "Description": "TODO: Figure out terminator port."
      }
    ]
  },
  {
    "ID": "CMD033",
    "Int": 133,
    "Name": "PacketizeAndPush",
    "Description": "Packetize and Push Command.",
    "Example": "TODO: Derive an example",
    "Family": "Macro Commands",
    "Parameters": [
      {
        "Name": "StackNumber",
        "Type": "Integer",
        "Description": "Stack Number."
      },
      {
        "Name": "PacketType",
        "Type": "Integer",
        "Description": "TODO: Look up packet types."},
      {
        "Name": "ReservedSpace1",
        "Type": "String",
        "Description": "TODO: Figure out Reserved Space 1"
      },
      {
        "Name": "ReservedSpace2",
        "Type": "String",
        "Description": "TODO: Figure out Reserved Space 2"
      },
      {
        "Name": "Length",
        "Type": "Integer",
        "Description": "Length of the packet."
      },
      {
        "Name": "Data",
        "Type": "String",
        "Description": "The data to be packetized."
      }
    ]
  },
  {
    "ID": "CMD034",
    "Int": 134,
    "Name": "PushDataOntoStack",
    "Description": "Push data onto stack.",
    "Example": "",
    "Family": "Read/Write Memory Commands",
    "Parameters": [
      {
        "Name": "StackNumber",
        "Type": "Integer",
        "Description": "Stack number."
      },
      {
        "Name": "Length",
        "Type": "Integer",
        "Description": "Length of the packet."
      },
      {
        "Name": "Data",
        "Type": "String",
        "Description": "The data to be packetized."
      }
    ]
  },
  {
    "ID": "CMD035",
    "Int": 135,
    "Name": "ProcessCommandDebugging",
    "Description": "Prints to the screen the received command.",
    "Example": "r 135",
    "Family": "Debugging Commands"
  },
  {
    "ID": "CMD036",
    "Int": 137,
    "Name": "E/DIMI-100",
    "Description": "Enable/Disable IMI-100 communication power.",
    "Example": "r 137 1",
    "Family": "Guidance, Navigation, and Control Commands",
    "Parameters": [
      {
        "Name": "OnOffIMI",
        "Type": "Boolean",
        "Description": "Returns ‘IMI-100 comm on.’ on enabling, returns ‘IMI-100 comm off.’ on disabling."
      }
    ]
  },
  {
    "ID": "CMD037",
    "Int": 140,
    "Name": "PayloadPower",
    "Description": "Toggles payload power.",
    "Example": "r 140 1",
    "Family": "Payload Commands",
    "Parameters": [
      {
        "Name": "OnOffPayload",
        "Type": "Boolean",
        "Description": "0 = Off, 1 = On"
      }
    ]
  },
  {
    "ID": "CMD038",
    "Int": 149,
    "Name": "ResetProcessor",
    "Description": "Reset Other Processor.",
    "Example": "r 149 1",
    "Family": "Debugging Commands",
    "Parameters": [
      {
        "Name": "ResetOtherProcessor",
        "Type": "Boolean",
        "Description": "0 = Don't float line after cycling, 1 = Float line after cycling"
      }
    ]
  },
  {
    "ID": "CMD039",
    "Int": 150,
    "Name": "TransceiverPower",
    "Description": "Toggles transceiver power.",
    "Example": "",
    "Family": "Communication Commands",
    "Parameters": [
      {
        "Name": "OnOffTransceiver",
        "Type": "Boolean",
        "Description": "0 = Off, 1 = On"
      }
    ]
  },
  {
    "ID": "CMD040",
    "Int": 151,
    "Name": "CPUReset",
    "Description": "Resets CPU.",
    "Example": "r 151",
    "Family": "Debugging Commands"
  },
  {
    "ID": "CMD041",
    "Int": 152,
    "Name": "FlashTesting",
    "Description": "Flash testing functions.",
    "Example": "r 152 {see parameters}",
    "Family": "Debugging Commands",
    "Parameters": [
      {
        "Name": "CheckVersionOfFlash",
        "Description": "The X position of the satellite.",
        "Command": "1"
      },
      {
        "Name": "CheckStatusBytesOfFlash",
        "Description": "Check the status bytes of the flash.",
        "Command": "2"
      },
      {
        "Name": "ToggleWireProtectionPin",
        "Description": "Toggles the wire protection pin.",
        "Command": "3"
      },
      {
        "Name": "EnableWritingToFlashDevice",
        "Description": "Enables writing to flash device.",
        "Command": "4"
      },
      {
        "Name": "DisableWritingToFlashDevice",
        "Description": "Disables writing to flash device.",
        "Command": "5"
      },
      {
        "Name": "PerformReadingTestFlash",
        "Description": "Perform a reading test in flash. ",
        "Command": "6",
        "Parameters": [{
          "Name": "Location",
          "Description": "Location in hex.",
          "Type": "String",
          "Example": "r 152 *{6 Digit Hex}*"
        }]
      },
      {
        "Name": "DisablesSectorProtection",
        "Description": "Disables sector protection on the sector containing the given address. TODO: Need to figure out how to add N-number of inputs. ",
        "Command": "7",
        "Example": "r 127 7 {address} {address} {address}",
        "Parameters":[{
          "Name": "Address",
          "Description": "Address oh memory in 6 Digit Hex.",
          "Type": "String"
        }]
      },
      {
        "Name": "ChecksIfFlashLocationIsEmptyForSpecifiedLength",
        "Description": "Checks if flash location is empty for a specified length",
        "Command": "8",
        "Example": "r 127 8 {address} {length}",
        "Parameters": [
          {
            "Name": "Address",
            "Description": "Address of memory in 6 Digit Hex.",
            "Type": "String"
          },
          {
            "Name": "Length",
            "Description": "Length of memory being accessed",
            "Type": "Integer"
          }
        ]
      }, 
      {
        "Name": "EraseChosenBlock",
        "Description": "Erases the chosen block",
        "Command": "9",
        "Example": "r 152 9 {2-byte block number}",
        "Parameters": [
          {
            "Name": "Address",
            "Description": "Address of memory in 6 Digit Hex.",
            "Type": "String"
          }
        ]
      },
      {
        "Name": "CheckSectorProtectionOnSpecificSector",
        "Description": "Checks sector protection on a specific sector",
        "Command": "10",
        "Example": "r 152 10 {2-byte block number}",
        "Parameters": [
          {
            "Name": "Address",
            "Description": "Address of memory in 6 Digit Hex.",
            "Type": "String"
          }
        ]
      },
      {
        "Name": "SingleWriteTest",
        "Description": "Single write test",
        "Command": "11",
        "Example": "r 152 11 {2-byte block number}",
        "Parameters": [
          {
            "Name": "Address",
            "Description": "Address of memory in 6 Digit Hex.",
            "Type": "String"
          }
        ]
      },
      {
        "Name": "ResetsFlashBasedRebootCounter",
        "Description": "Resets flash-based reboot counter.",
        "Command": "12"
      },
      {
        "Name": "ErasesTheEntireFlashMemoryChip",
        "Description": "Erases the entire flash memory chip.",
        "Command": "13"
      },
      {
        "Name": "DisplayMemoryMap",
        "Description": "TODO: Figure out if this is either Display or disable memory map",
        "Command": "14",
        "Example": "r 152 14 0 1",
        "Parameters": [
          {
            "Name": "DisplayHex",
            "Description": "Displays hex version of memory map to userport",
            "Command": "0 0"
          },
          {
            "Name": "DisplayASCII",
            "Description": "Displays ascii version of memory map to userport",
            "Command": "0 1"
          }
        ]
      },
      {
        "Name": "ManuallySetTelemetryWriteAddress",
        "Description": "Manually set telemetry write address",
        "Command": "15",
        "Example": "r 152 15 {2-byte block number}",
        "Parameters": [
          {
            "Name": "Address",
            "Description": "Address of memory in 6 Digit Hex.",
            "Type": "String"
          }
        ]
      },
      {
        "Name": "ManuallySetPlymouthWriteAddress",
        "Description": "Manually set Plymouth write address",
        "Command": "16",
        "Example": "r 152 16 {2-byte block number}",
        "Parameters": [
          {
            "Name": "Address",
            "Description": "Address of memory in 6 Digit Hex.",
            "Type": "String"
          }
        ]
      },
      {
        "Name": "DisplayR/WPointersToPort",
        "Description": "Display r/w pointers (telem and PLY) to a port.",
        "Command": "17",
        "Example": "r 152 17 {Port number}",
        "Parameters": [
          {
            "Name": "Port",
            "Description": "Port desired to inspect.",
            "Type": "Integer"
          }
        ]
      },
      {
        "Name": "SetNewDataFlag",
        "Description": "Sets NewData flag to 0 or 1 for MISC, BEACON, and PLY stacks.",
        "Command": "18",
        "Example": "r 152 18 {Binary Flag}",
        "Parameters": [
          {
            "Name": "Flag",
            "Description": "TODO: Need to understand this more.",
            "Type": "Binary"
          }
        ]
      },
      {
        "Name": "UnprotectAllSectorsInFlashMemory",
        "Description": "Unprotects all sectors in flash memory",
        "Command": "19"
      },
      {
        "Name": "PrintSectorProtectionToTheGivenPort",
        "Description": "Print the sector protection to the given port",
        "Command": "20",
        "Example": "r 152 20 {Port number}",
        "Parameters": [
          {
            "Name": "Port",
            "Description": "Port desired to inspect.",
            "Type": "Integer"
          }
        ]
      },
      {
        "Name": "TestsTheFlashAddressToPageFunction",
        "Description": "Tests the flash address to page function",
        "Command": "21"
      },
      {
        "Name": "SetTheFlashSwapBlock",
        "Description": "Set the flash swap block.",
        "Command": "23",
        "Example": "r 152 23 {int MSB} {int LSB}",
        "Parameters": [
          {
            "Name": "MostSignificantBit",
            "Description": "Most Significant Bit in Flash Block",
            "Type": "Integer"
          },
          {
            "Name": "LeastSignificantBit",
            "Description": "Least Significant Bit in Flash Block",
            "Type": "Integer"
          }
        ]
      }
    ]
  },
  {
    "ID": "CMD042",
    "Int": 153,
    "Name": "CommandScheduling",
    "Description": "Schedule a command using DELTA time.",
    "Example": "r 153 {schedule #} {delta time [7 bytes]} {command}",
    "Family": "Schedule Commands",
    "Parameters": [
      {
        "Name": "ScheduleNumber",
        "Type": "Integer",
        "Description": "Assign a schedule between 0-11."
      },
      {
        "Name": "DeltaTime",
        "Description": "Delta Time",
        "Parameters": [
          {
            "Name": "Day",
            "Type": "Integer",
            "Description": "Number of days to schedule ahead of time. Set to 255 if you want to repeat something more often than a day."
          },
          {
            "Name": "Hour",
            "Type": "Integer",
            "Description": "Number of hours to schedule ahead of time."
          },
          {
            "Name": "Minutes",
            "Type": "Integer",
            "Description": "Number of minutes to schedule ahead of time."
          },
          {
            "Name": "Seconds",
            "Type": "Integer",
            "Description": "Number of seconds to schedule ahead of time."
          }
        ]
      },
      {
        "Name": "Repeat",
        "Type": "Boolean",
        "Description": "This will set "
      }
    ]
  },
  {
    "ID": "CMD043",
    "Int": 154,
    "Name": "SynchronizeTime",
    "Description": "Synchronize time on the other PPM using your time.",
    "Example": "r 154",
    "Family": "Guidance, Navigation, and Control Commands"
  },
  {
    "ID": "CMD044",
    "Int": 155,
    "Name": "GetCRC",
    "Description": "Get CRC of message.",
    "Example": "",
    "Family": "Debugging Commands",
    "Parameters": [
      {
        "Name": "XPos",
        "Type": "Float",
        "Description": "The X position of the satellite."
      }
    ]
  },
  {
    "ID": "CMD045",
    "Int": 156,
    "Name": "ConfigureBeaconDefault",
    "Description": "Configure the Beacon to default settings.",
    "Example": "",
    "Family": "Communication Commands"
  },
  {
    "ID": "CMD046",
    "Int": 158,
    "Name": "ForwardSLIPMessage",
    "Description": "Forwards a SLIP-encapulated message to the chosen port.",
    "Example": "",
    "Family": "Read/Write Memory Commands",
    "Parameters": [
      {
        "Name": "Port",
        "Type": "Integer",
        "Description": "The chosen port."
      },
      {
        "Name": "Length",
        "Type": "Integer",
        "Description": "The length of the chosen message"
      },
      {
        "Name": "Message",
        "Type": "String",
        "Description": "Message to be sent."
      }
    ]
  },
  {
    "ID": "CMD047",
    "Int": 159,
    "Name": "NewCallsign",
    "Description": "Assign a new callsign to the beacon. Call 156 after this command to finish the configuration.",
    "Example": "159 \"ABC123\"",
    "Family": "Communication Commands",
    "Parameters": [
      {
        "Name": "CallSign",
        "Type": "String",
        "Description": "The X position of the satellite."
      }
    ]
  },
  {
    "ID": "CMD048",
    "Int": 161,
    "Name": "DebugLevel",
    "Description": "Debug Level.",
    "Example": "",
    "Family": "Debugging Commands",
    "Parameters": [
      {
        "Name": "DebugLevel",
        "Type": "Integer",
        "Description": "The current debug level."
      }
    ]
  },
  {
    "ID": "CMD049",
    "Int": 163,
    "Name": "AddTime",
    "Description": "Adds a specified amount of time.",
    "Example": "r 163 0 0 0 0 2 3 10",
    "Family": "Schedule Commands",
    "Parameters": [
      {
        "Name": "Hours",
        "Type": "Integer",
        "Description": "The number of hours to add."
      },
      {
        "Name": "Minutes",
        "Type": "Integer",
        "Description": "The number of minutes to add."
      },
      {
        "Name": "Seconds",
        "Type": "Integer",
        "Description": "The number of seconds to add."
      }
    ]
  },
  {
    "ID": "CMD050",
    "Int": 165,
    "Name": "DisplayData",
    "Description": "Display chosen data to port.",
    "Example": "",
    "Family": "Debugging Commands",
    "Parameters": [
      {
        "Name": "DisplayChosenDataToPort",
        "Type": "Integer",
        "Description": "",
        "Parameters": [
          {
            "Name": "ShowRebootCounter",
            "Description": "Sends reboot counter to whatever port called processed the command.",
            "Command": "1",
            "Example": "r 165 1"
          },
          {
            "Name": "ShowTime",
            "Description": "Shows the time.",
            "Command": "2",
            "Example": "r 165 2"
          },
          {
            "Name": "ShowCurrentVersionOfSoftware",
            "Description": "Show current version of software.",
            "Command": "3",
            "Example": "r 165 3"
          },
          {
            "Name": "ShowMacros",
            "Description": "Show macros.",
            "Command": "7",
            "Example": "r 165 3"
          },
          {
            "Name": "ShowSchedule",
            "Description": "Show schedules.",
            "Command": "8",
            "Example": "r 165 8"
          }
        ]
      }
    ]
  },
  {
    "ID": "CMD051",
    "Int": 166,
    "Name": "SendMessage",
    "Description": "Send vanity message through beacon.",
    "Example": "166 11 Hello World",
    "Family": "Communication Commands",
    "Parameters": [
      {
        "Name": "Length",
        "Type": "Integer",
        "Description": "The length of the message to be sent."
      },
      {
        "Name": "Message",
        "Type": "String",
        "Description": "Free form of the message to be sent."
      }
    ]
  },
  {
    "ID": "CMD052",
    "Int": 167,
    "Name": "BeaconPower",
    "Description": "Beacon Power.",
    "Example": "",
    "Family": "Communication Commands",
    "Parameters": [
      {
        "Name": "XPos",
        "Type": "Float",
        "Description": "The X position of the satellite."
      }
    ]
  },
  {
    "ID": "CMD053",
    "Int": 172,
    "Name": "BurnWire",
    "Description": "Burn wire.",
    "Example": "",
    "Family": "Guidance, Navigation, and Control Commands",
    "Parameters": [
      {
        "Name": "BurnWire",
        "Type": "Integer",
        "Description": "The burn wire to be commanded.",
        "Parameters": [
          {
            "Name": "BurnWire1",
            "Command": "0"
          },
          {
            "Name": "BurnWire2",
            "Command": "1"
          }
        ]
      }
    ]
  },
  {
    "ID": "CMD054",
    "Int": 202,
    "Name": "ClearBuffers",
    "Description": "Clear Buffers.",
    "Example": "",
    "Family": "Debugging Commands",
    "Parameters": [
      {
        "Name": "Option",
        "Type": "Integer",
        "Description": "Clear various buffers.",
        "Parameters":[
          {
            "Name": "ClearMacros",
            "Command": "5"
          },
          {
            "Name": "ClearSchedule",
            "Command": "6"
          }
        ]
      }
    ]
  },
  {
    "ID": "CMD055",
    "Int": 215,
    "Name": "StartEPSAcquisitionCycle",
    "Description": "Start EPS Acquisition Cycle.",
    "Example": "",
    "Family": "Electrical Power System Commands"
  },
  {
    "ID": "CMD056",
    "Int": 216,
    "Name": "PrintEPSData",
    "Description": "Print EPS Data.",
    "Example": "",
    "Family": "Electrical Power System Commands"
  },
  {
    "ID": "CMD057",
    "Int": 217,
    "Name": "GetEPSVersion",
    "Description": "Get EPS Version.",
    "Example": "",
    "Family": "Electrical Power System Commands"
  },
  {
    "ID": "CMD058",
    "Int": 237,
    "Name": "BatteryCommands",
    "Description": "Battery Commands.",
    "Example": "",
    "Family": "Electrical Power System Commands",
    "Parameters": [
      {
        "Name": "BatteryCommand",
        "Type": "Integer",
        "Paremeters":[
          {
            "Name": "SetBatteryState",
            "Description": "Battery counts move in reverse order to voltages.  A high count indicates low voltage, and vice versa.",
            "Example": "",
            "Command": "1",
            "Type": "Hexadecimal"
          },
          {
            "Name": "SetNewThreshold",
            "Description": "Set new Low and High.",
            "Example": "2 *0109* *00CB* -> Low/Med = 265, Med/High = 200",
            "Command": "2",
            "Paremeters": [
              {
                "Name": "LowThreshold",
                "Description": " 2-byte Low/Med Threshold Counts]",
                "Type": "Hexadecimal"
              },
              {
                "Name": "HighThreshold",
                "Description": " 2-byte High/Med Threshold Counts]",
                "Type": "Hexadecimal"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "ID": "CMD060",
    "Int": 240,
    "Name": "CommitGlobalConfiguration",
    "Description": "Commit Global configuration to flash memory.",
    "Example": "",
    "Family": "Read/Write Memory Commands"
  },
  {
    "ID": "CMD061",
    "Int": 241,
    "Name": "LoadGlobalDefaults",
    "Description": "Load globals with defaults.",
    "Example": "",
    "Family": "Read/Write Memory Commands"
  },
  {
    "ID": "CMD062",
    "Int": 242,
    "Name": "LoadGlobalFlash",
    "Description": "Load globals with Flash variables.",
    "Example": "",
    "Family": "Read/Write Memory Commands"
  },
  {
    "ID": "CMD063",
    "Int": 249,
    "Name": "CopyDataByte",
    "Description": "Copy data to DataByte.",
    "Example": "",
    "Family": "Read/Write Memory Commands",
    "Parameters": [
      {
        "Name": "CopyData",
        "Type": "String",
        "Description": "",
        "Paremeters": [
          {
            "Name": "ByteOffset",
            "Description": "",
            "Type": "Integer"
          },
          {
            "Name": "Data",
            "Description": "",
            "Type": "String"
          }
        ]
      }
    ]
  },
  {
    "ID": "CMD064",
    "Int": 253,
    "Name": "LoadSchedule",
    "Description": "Load Schedule Commands.",
    "Example": "253 1 255 255 255 255 255 255 10 155 -> Programs schedule 1 to run command 155 minute at 10 seconds past the minute",
    "Family": "Schedule Commands",
    "Parameters": [
      {
        "Name": "ScheduleNumber",
        "Type": "Integer",
        "Description": "The schedule slot being filled."
      },
      {
        "Name": "Time",
        "Description": "7-byte time",
        "Parameters": [
          {
            "Name": "Month",
            "Description": "The two digit month requested for the schedule.",
            "Type": "Integer"
          },
          {
            "Name": "Day",
            "Description": "The two digit day requested for the schedule.",
            "Type": "Integer"
          },
          {
            "Name": "Year",
            "Description": "The two digit year requested for the schedule.",
            "Type": "Integer"
          },
          {
            "Name": "WeekDay",
            "Description": "This is always a wildcard",
            "Type": "Integer",
            "Value": "255"
          },
          {
            "Name": "Hour",
            "Description": "The two digit hour requested for the schedule.",
            "Type": "Integer"
          },
          {
            "Name": "Minute",
            "Description": "The two digit minute requested for the schedule.",
            "Type": "Integer"
          },
          {
            "Name": "Second",
            "Description": "The two digit second requested for the schedule.",
            "Type": "Integer"
          }
        ]
      }
    ]
  },
  {
    "ID": "CMD065",
    "Int": 254,
    "Name": "BootloaderCommand",
    "Description": "Bootloader Command.",
    "Example": "",
    "Family": "Debugging Commands",
    "Parameters": [
      {
        "Name": "ActivateBootloader",
        "Description": "Activate bootloader.Make sure you have verified tha hex file first",
        "Command": "SUDO"
      },
      {
        "Name": "ClearFlashFile",
        "Description": "Clears a specified number of bytes from the Hexfile area of flash, rounding up to the next highest flash block.",
        "Command": "C", 
        "Parameters": [
          {
            "Name": "NumberOfBytesToClear",
            "Description": "",
            "Type": "Hexadecimal"
          }
        ]
      },
      {
        "Name": "LoadNewHexFile",
        "Description": "Loads a new hex file into flash.  You have 30 seconds to begin the transfer, and 2 seconds after each line to continue sending.",
        "Command": "L", 
        "Parameters": [
          {
            "Name": "ListenPort",
            "Description": "The Port to listen on.",
            "Type": "Integer"
          },
          {
            "Name": "ReportPort",
            "Description": "The Port to report on.",
            "Type": "Integer"
          },
          {
            "Name": "CarriageReturn",
            "Description": "The carriage return.",
            "Type": "String"
          },
          {
            "Name": "FileContents",
            "Description": "The hex file to load into flash.",
            "Type": "String"
          }
        ]
      },
      {
        "Name": "VerifyFile",
        "Description": "Reads a hex file out of flash and compares the checksum to the given checksum.",
        "Command": "V", 
        "Parameters": [
          {
            "Name": "CRC",
            "Description": "",
            "Type": "Hexadecimal"
          }
        ]
      }
    ]
  },
  {
    "ID": "CMD066",
    "Int": 255,
    "Name": "ResetWatchdogTimer",
    "Description": "Reset via Watchdog Timer.",
    "Example": "",
    "Family": "Debugging Commands"
  }
]